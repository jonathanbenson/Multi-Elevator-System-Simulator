
--------------------------------------
Algorithm for an Multi-Elevator System
--------------------------------------
* This algorithm does not include the time-keeping system used in the simulation to track the time
	- The time is kept track a master time clock (seconds) that ticks every iteration of the outermost loop
	- Each elevator has an initialized time value that it takes to traverse one floor and one for how long it takes to stop at one floor for a client
	- Each elevator also has stopwatches for both time values that keep track of its state and direction
--------------------------------------

given an array of elevators with matching speeds and randomized starting floors

given an priority queue of incoming clients with randomized starting and next floors, and sorted by a randomized first time punch // time of elevator-button-press


while the incoming clients queue is not empty and all the elevators are not empty

	for each incoming client who's first time punch is equal to the current time

		get the closest elevator to the client from the array of elevators

		if the elevator is idle

			if the elevator has no direction // it is empty

				if the elevator's current floor matches the incoming client's current floor

					initialize the elevator's state to idle

					send them to the elevator's outbound queue

					change the elevators direction

				else

					send the client to the elevator's inbound queue

					set the elevator in motion in the direction of the client's current floor


				pop the client from the queue of incoming clients


			else if the elevator does have a direction

				if the elevator's current floor matches the client's current floor

					send the client outbound

				else

					send the client inbound

				pop the client from the queue of incoming clients

		
		else if the elevator is in motion

			if the client's current floor matches the floor of the elevator
				// the elevator just passed the floor the client is on

				send the client inbound queue of the opposite direction of the elevator

			else

				send the client inbound normally

			pop the client from the queue of incoming clients


	for each elevator in the array of elevators

		if the elevator has no direction // it is empty

			if the direction of the elevator is down

				for each client in the elevator's downward inbound queue who's current floor matches the floor of the elevator

					send them outbound // pick them up

				for each client in the elevator's downward outbound queue who's next floor matches the floor of the elevator

					send them to the elevator's record of processed clients // drop them off

			else 

				for each client in the elevator's upward inbound queue who's current floor matches the floor of the elevator

					send them outbound // pick them up

				for each client in the elevator's upward outbound queue who's next floor matches the floor of the elevator

					send them to the elevator's record of processed clients // drop them off


		if the elevator is empty
			// the elevator should not move when it is empty

			set its state to idle

			set its direction to NA



		if the elevator's downward inbound and outbound queues are empty

			change its direction to UP

		else if its upward inbound and outbound queues are empty

			change its direction to DOWN



























