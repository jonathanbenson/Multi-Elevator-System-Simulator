
My pseudo-code implementation of Elevator::simulation

	// Assumes the elevators all have randomly generated:
	// floor, active_period, idle_period
	// ... and all clients have randomly generated:
	// current_floor, next_floor, time_punches[0]
	
	// This simulation function should pop all clients from the given list
	// ... send them through elevators' inbound and outbound queues
	// ... and eventually push them to the elevators' Elevator::record queues with all three of their time punches recorded


Elevator::simulation Algorithm :



given a list of elevators and clients

set time equal to 0

sort the list of random clients by their first time punch (ascending)


while the list of clients is not empty AND all the outbound and inbound queues of the elevators are not empty

	if the time is equal to the client's first time punch

		find the elevator closest to the client

			if that elevator is in motion

				if that elevator is below the client

					push that client to that elevator's downward inbound queue (sorted descending by the client's current floor)

				else
				
					push that client to that elevator's upward inbound queue

			else

				mark the current time as the client's second time punch (boarding the elevator)

				if that elevator is below the client's next floor

					push that client to that elevator's downward outbound queue (sorted descending by the clients' next floors)

				else
				
					push that client to that elevator's upward outbound queue (sorted descending by the clients' next floors)

				reset the elevator's idle time counter to 0


	for each elevator in the given list of elevators

		if the elevator is idle

			if the direction of the elevator is down

				for each client in the downward inbound queue whos current floor is the current floor of the elevator

					mark that client's second time punch (boarding the elevator) as the current time

					if that elevator is below the client

						push that client to that elevator's downward outbound queue (sorted descending by the clients' next floors)

					else
				
						push that client to that elevator's upward outbound queue (sorted descending by the clients' next floors)

					pop them from the front of the downward inbound queue




				for each client in the downward outbound queue whos next floor is the current floor of the elevator

					mark that client's third time punch (leaving the elevator) as the current time

					push them to the elevator's queue of recorded clients

					pop them from the front of the downward outbound queue

				
				increment the elevator's idle time counter by 1


			else

				for each client in the upward inbound queue whos current floor is the current floor of the elevator

					mark that client's second time punch (boarding the elevator) as the current time

					if that elevator is below the client

						push that client to that elevator's downward outbound queue (sorted descending by the clients' next floors)

					else
				
						push that client to that elevator's upward outbound queue (sorted descending by the clients' next floors)

					pop them from the front of the upward inbound queue

				


				for each client in the upward outbound queue whos next floor is the current floor of the elevator

					mark that client's third time punch (leaving the elevator) as the current time

					push them to the elevator's queue of recorded clients

					pop them from the front of the upward outbound queue


		else if the elevator is in motion

			increment the elevator's active time counter by 1

		
		for each elevator in the given list of elevators

			if the elevator's active time counter is equal to its active time period

				reset its active time counter to 0

				set it in motion again (change the state variable)

			
			else if the elevator's idle time counter is equal to its idle time period

				reset its idle time counter to 0

				put it in motion again (change its state variable to ACTIVE)

				if the elevator is going down

					if the elevator's downward inbound queue and downward outbound queue are empty

						change the elevator's direction to up

				else

					if the elevator's upward inbound queue and upward outbound queue are empty

						change the elevator's direction to down


	increment the time by 1





						

			

		



			



			



	

	


